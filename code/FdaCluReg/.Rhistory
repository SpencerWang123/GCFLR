xij_list=list(xij_temp)
## generating Y
###parameter setting
#
N=nrow(fda_coef_df)#sample size
reg_error1=rnorm(N,0,1)*0.5#epsilon-1
reg_error2=rt(N,3)*0.5#epsilon-2
reg_error3=(rchisq(N,3)-3)*0.5#epsilon-3
#
reg_var1=rep(1,N)#sigma-1
reg_var2=0.5*(fda_coef_df[,1]+fda_coef_df[,2])#sigma-2
#
reg_coef_df=matrix(c(rep(1,N),rep(1,N/2),rep(-1,N/2)),ncol = 2)
reg_coef_df_list=list(reg_coef_df)#for multi variables
reg_intercept=rep(0,200)
##########################
yi_temp_n_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
########################
yi_temp_n_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
Y_list=vector("list",6);
Y_list[[1]]=yi_temp_n_homo;Y_list[[2]]=yi_temp_t_homo;Y_list[[3]]=yi_temp_chisq_homo
Y_list[[4]]=yi_temp_n_heter;Y_list[[5]]=yi_temp_t_heter;Y_list[[6]]=yi_temp_chisq_heter
names(Y_list)=c("homo_n","homo_t","homo_chisq","heter_n","heter_t","heter_chisq")
library(fda)
basis_need=fourier_basis=create.fourier.basis(c(0,1),10)# basis function
#smoothing
sample_t=seq(0,1,0.01)#sampling time points
K_seq=2:4
true_label=c(rep(1,100),rep(2,100))
var_ratio=0.9
rounds=110
burning_period=10
lambda=1
ncomp_l=2
simulation1_res=simulation_results_function(X_list =xij_list,
Y=Y_list,
basis=basis_need,
sample_t=sample_t,
var_ratio=var_ratio,
K_max=5,
true_label=true_label,
rounds=rounds,
burning_period=burning_period,
lambda = lambda,
method=method,
ncomp_u=10,ncomp_l=ncomp_l,seed=seed_seq,type = type)
save(simulation1_res,file = paste("C:/users/spenc/desktop/simulation_results/new/sim1/ls/s1_",method,seed_seq,".RData",sep = ""))
print(seed_seq)
}
num_cores=12
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("color_seq"))
parLapply(cl,21:50,parallel_simulation1,method="lad",type=c(TRUE,TRUE))
stopCluster(cl)
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("color_seq"))
parLapply(cl,21:50,parallel_simulation1,method="lad",type=c(TRUE,TRUE))
parLapply(cl,51:60,parallel_simulation1,method="ls",type=c(TRUE,TRUE))
parLapply(cl,1:100,parallel_simulation1,method="hl",type=c(FALSE,TRUE))
knitr::opts_chunk$set(echo = TRUE)
color_seq=c("red","blue","orange","purple","green","grey","#cd5c5c","#006400",
"#FF00FF","#d2691e","#00FFFF","#808000","yellow","black","#FF4000")
parallel_simulation2=function(seed_seq,method="ls",type=c(TRUE,TRUE))
{
library(FdaCluReg)
set.seed(seed_seq)
fun_1=function(t){return(sin((pi*t))*(2^0.5))}#basis fun 1
fun_2=function(t){return(sin((2*pi*t))*(2^0.5))}#basis fun 2
function_list=list(fun_1,fun_2)#function list
sample_t=seq(0,1,0.01)#sampling time
group_scale=c(100,100,100)#group scales
N=sum(group_scale)#number of samples
fda_coef_df=cbind(rnorm(N,0,1),rnorm(N,0,2))#basis coef. for X construction
fda_coef_df_list=list(fda_coef_df)# for multi variables
error_sd=0.2#standard error of observation error
# generating X
xij_temp=xij_fun(function_list=function_list,fda_coef_df=fda_coef_df,sample_t=sample_t,error_sd = 0.2,seed = seed_seq)
xij_list=list(xij_temp)
## generating Y
###parameter setting
#
N=nrow(fda_coef_df)#sample size
reg_error1=rnorm(N,0,1)*0.5#epsilon-1
reg_error2=rt(N,3)*0.5#epsilon-2
reg_error3=(rchisq(N,3)-3)*0.5#epsilon-3
#
reg_var1=rep(1,N)#sigma-1
reg_var2=0.5*(fda_coef_df[,1]+fda_coef_df[,2])#sigma-2
#
reg_coef_df=as.matrix(cbind(c(rep(1,200),rep(-1,100)),c(rep(1,100),rep(-1,200))))
reg_coef_df_list=list(reg_coef_df)#for multi variables
reg_intercept=c(rep(3,100),rep(-3,100),rep(0,100))
##########################
yi_temp_n_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
########################
yi_temp_n_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
Y_list=vector("list",6);
Y_list[[1]]=yi_temp_n_homo;Y_list[[2]]=yi_temp_t_homo;Y_list[[3]]=yi_temp_chisq_homo
Y_list[[4]]=yi_temp_n_heter;Y_list[[5]]=yi_temp_t_heter;Y_list[[6]]=yi_temp_chisq_heter
names(Y_list)=c("homo_n","homo_t","homo_chisq","heter_n","heter_t","heter_chisq")
library(fda)
basis_need=fourier_basis=create.fourier.basis(c(0,1),10)# basis function
#smoothing
sample_t=seq(0,1,0.01)#sampling time points
K_seq=2:4
true_label=c(rep(1,100),rep(2,100),rep(3,100))
var_ratio=0.9
rounds=110
burning_period=10
lambda=1
ncomp_l=2
simulation2_res=simulation_results_function(X_list =xij_list,
Y=Y_list,
basis=basis_need,
sample_t=sample_t,
var_ratio=var_ratio,
K_max=5,
true_label=true_label,
rounds=rounds,
burning_period=burning_period,
lambda = lambda,
method=method,
ncomp_u=10,ncomp_l=ncomp_l,seed=seed_seq,type = type)
save(simulation2_res,file = paste("C:/users/spenc/desktop/simulation_results/new/sim2/ls/s2_",method,seed_seq,".RData",sep = ""))
print(seed_seq)
}
stopCluster(cl)
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("color_seq"))
parLapply(cl,11:50,parallel_simulation2,method="lad",type=c(TRUE,TRUE))
parLapply(cl,11:50,parallel_simulation2,method="ls",type=c(TRUE,TRUE))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Spenc/Desktop/manual_packages/FdaCluReg")
install.packages("C:/Users/Spenc/Desktop/manual_packages/FdaCluReg_0.0.0.18.tar.gz")
library(FdaCluReg)
color_seq=c("red","blue","orange","purple","green","grey","#cd5c5c","#006400",
"#FF00FF","#d2691e","#00FFFF","#808000","yellow","black","#FF4000")
parallel_simulation3=function(seed_seq,method="ls",type=c(TRUE,TRUE))
{
library(FdaCluReg)
set.seed(seed_seq)
fun_1=function(t){return(sin((pi*t))*(2^0.5))}#basis fun 1
fun_2=function(t){return(sin((2*pi*t))*(2^0.5))}#basis fun 2
function_list=list(fun_1,fun_2)#function list
sample_t=seq(0,1,0.01)#sampling time
group_scale=c(100,100,100)#group scales
N=sum(group_scale)#number of samples
fda_coef_df_list=NULL
fda_coef_df1=cbind(rnorm(N,0,1),rnorm(N,0,2))#basis coef. for X construction
fda_coef_df2=cbind(rnorm(N,0,1),rnorm(N,0,2))#basis coef. for X construction
fda_coef_df_list=list(fda_coef_df1,fda_coef_df2)#for multi variables
error_sd=0.2#standard error of observation error
xij_temp_1=xij_fun(function_list=function_list,fda_coef_df=fda_coef_df1,sample_t=sample_t,error_sd = 0.2)
xij_temp_2=xij_fun(function_list=function_list,fda_coef_df=fda_coef_df2,sample_t=sample_t,error_sd = 0.2)
xij_list=list(xij_temp_1,xij_temp_2)#for multi variables
## generating Y
###parameter setting
#
rr=0.5
reg_error1=rnorm(N,0,1)*rr#epsilon-1
reg_error2=rt(N,3)*rr#epsilon-2
reg_error3=(rchisq(N,3)-3)*rr#epsilon-3
#
reg_var1=rep(1,N)#sigma-1
reg_var2=0.5*(fda_coef_df1[,1]+fda_coef_df1[,2]+fda_coef_df2[,1]+fda_coef_df2[,2])#sigma-2
#
reg_coef_df_list=NULL
reg_coef_df_var1=as.matrix(cbind(c(rep(1,200),rep(-1,100)),c(rep(1,100),rep(-1,200))))
reg_coef_df_var2=as.matrix(cbind(c(rep(2,200),rep(-2,100)),c(rep(2,100),rep(-2,100),rep(-1,100))))
reg_coef_df_list=list(reg_coef_df_var1,reg_coef_df_var2)#for multi variables
reg_intercept=c(rep(3,100),rep(-3,100),rep(0,100))
##########################
yi_temp_n_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
########################
yi_temp_n_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
Y_list=vector("list",6);
Y_list[[1]]=yi_temp_n_homo;Y_list[[2]]=yi_temp_t_homo;Y_list[[3]]=yi_temp_chisq_homo
Y_list[[4]]=yi_temp_n_heter;Y_list[[5]]=yi_temp_t_heter;Y_list[[6]]=yi_temp_chisq_heter
names(Y_list)=c("homo_n","homo_t","homo_chisq","heter_n","heter_t","heter_chisq")
library(fda)
basis_need=fourier_basis=create.fourier.basis(c(0,1),10)# basis function
#smoothing
sample_t=seq(0,1,0.01)#sampling time points
K_seq=2:4
true_label=c(rep(1,100),rep(2,100),rep(3,100))
var_ratio=0.9
rounds=110
burning_period=10
lambda=1
ncomp_l=2
simulation3_res=simulation_results_function(X_list =xij_list,
Y=Y_list,
basis=basis_need,
sample_t=sample_t,
var_ratio=var_ratio,
K_max=5,
true_label=true_label,
rounds=rounds,
burning_period=burning_period,
lambda = lambda,
method=method,
ncomp_u=10,ncomp_l=ncomp_l,seed=seed_seq,type = type)
save(simulation3_res,file = paste("C:/users/spenc/desktop/simulation_results/new/sim3/ls/s3_",method,seed_seq,".RData",sep = ""))
print(seed_seq)
}
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("color_seq"))
#parLapply(cl,1:7,parallel_simulation3,method="ls",type=c(TRUE,TRUE))
parLapply(cl,11:50,parallel_simulation3,method="lad",type=c(TRUE,TRUE))
parLapply(cl,51:70,parallel_simulation3,method="lad",type=c(TRUE,TRUE))
parLapply(cl,21:60,parallel_simulation3,method="ls",type=c(TRUE,TRUE))
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Spenc/Desktop/manual_packages/FdaCluReg")
install.packages("C:/Users/Spenc/Desktop/manual_packages/FdaCluReg_0.0.0.18.tar.gz")
library(FdaCluReg)
color_seq=c("red","blue","orange","purple","green","grey","#cd5c5c","#006400",
"#FF00FF","#d2691e","#00FFFF","#808000","yellow","black","#FF4000")
parallel_simulation4=function(seed_seq,method="ls",type=c(TRUE,TRUE),NN=100)
{
library(FdaCluReg)
set.seed(seed_seq)
fun_1=function(t){return(sin((pi*t))*(2^0.5))}#basis fun 1
fun_2=function(t){return(sin((2*pi*t))*(2^0.5))}#basis fun 2
function_list=list(fun_1,fun_2)#function list
sample_t=seq(0,1,0.01)#sampling time
group_scale=c(NN,NN)#group scales
N=sum(group_scale)#number of samples
fda_coef_df=cbind(rnorm(N,0,1),rnorm(N,0,2))#basis coef. for X construction
fda_coef_df_list=list(fda_coef_df)# for multi variables
error_sd=0.2#standard error of observation error
# generating X
xij_temp=xij_fun(function_list=function_list,fda_coef_df=fda_coef_df,sample_t=sample_t,error_sd = 0.2,seed = seed_seq)
xij_list=list(xij_temp)
## generating Y
###parameter setting
#
N=nrow(fda_coef_df)#sample size
reg_error1=rnorm(N,0,1)*0.5#epsilon-1
reg_error2=rt(N,3)*0.5#epsilon-2
reg_error3=(rchisq(N,3)-3)*0.5#epsilon-3
#
reg_var1=rep(1,N)#sigma-1
reg_var2=0.5*(fda_coef_df[,1]+fda_coef_df[,2])#sigma-2
#
reg_coef_df=matrix(c(rep(1,N),rep(1,N/2),rep(-1,N/2)),ncol = 2)
reg_coef_df_list=list(reg_coef_df)#for multi variables
reg_intercept=rep(0,N)
##########################
yi_temp_n_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_homo=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var1,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
########################
yi_temp_n_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error1,seed = seed_seq,interval = c(0,1))
yi_temp_t_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error2,seed = seed_seq,interval = c(0,1))
yi_temp_chisq_heter=yi_fun(function_list = function_list,
fda_coef_df_list  = fda_coef_df_list,
reg_coef_df_list = reg_coef_df_list,
reg_intercept = reg_intercept,
reg_var = reg_var2,
reg_error = reg_error3,seed = seed_seq,interval = c(0,1))
Y_list=vector("list",6);
Y_list[[1]]=yi_temp_n_homo;Y_list[[2]]=yi_temp_t_homo;Y_list[[3]]=yi_temp_chisq_homo
Y_list[[4]]=yi_temp_n_heter;Y_list[[5]]=yi_temp_t_heter;Y_list[[6]]=yi_temp_chisq_heter
names(Y_list)=c("homo_n","homo_t","homo_chisq","heter_n","heter_t","heter_chisq")
library(fda)
basis_need=fourier_basis=create.fourier.basis(c(0,1),10)# basis function
#smoothing
sample_t=seq(0,1,0.01)#sampling time points
K_seq=2:4
true_label=c(rep(1,NN),rep(2,NN))
var_ratio=0.9
rounds=110
burning_period=10
lambda=1
ncomp_l=2
simulation1_res=simulation_results_function(X_list =xij_list,
Y=Y_list,
basis=basis_need,
sample_t=sample_t,
var_ratio=var_ratio,
K_max=3,
true_label=true_label,
rounds=rounds,
burning_period=burning_period,
lambda = lambda,
method=method,
ncomp_u=10,ncomp_l=ncomp_l,seed=seed_seq,type = type)
save(simulation1_res,file = paste("C:/users/spenc/desktop/simulation_results/new/sim4/ls/s1_",method,seed_seq,".RData",sep = ""))
print(seed_seq)
}
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("color_seq"))
parLapply(cl,11:50,parallel_simulation4,method="lad",type=c(TRUE,TRUE),NN=200)
library(FdaCluReg)
library(ddalpha)
data_flies=dataf.medflies()
dt_mat=matrix(unlist(data_flies$dataf),ncol = 534)[31:60,]
label_mat=as.numeric(unlist(data_flies$labels)=="long-lived")
dt_all=data.frame(y=label_mat,t(dt_mat))
lm_test=lm(y~.,data = dt_all)
library(FdaCluReg)
library(fda)
basis_need=create.bspline.basis(seq(0,30,3),norder = 4)
basis_need$nbasis
gibbs_clusterwise_regression_auto
fly_clureg=function(seed)
{
library(FdaCluReg)
library(fda)
library(ddalpha)
basis_need=create.bspline.basis(c(seq(0,29,3),30),norder = 4)
temp_res_gibbs=gibbs_clusterwise_regression_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit",lambda = 1)
temp_res_2021=clusterwise_reg_2021_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit")
save(temp_res_gibbs,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/gibbs/logit",seed,".RData",sep = ""))
save(temp_res_2021,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/2021/logit",seed,".RData",sep = ""))
return(seed)
}
fly_clureg=function(seed)
{
library(FdaCluReg)
library(fda)
library(ddalpha)
basis_need=create.bspline.basis(c(seq(0,29,3),30),norder = 4)
temp_res_gibbs=gibbs_clusterwise_regression_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit",
lambda = 1,rounds = 100)
temp_res_2021=clusterwise_reg_2021_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit")
save(temp_res_gibbs,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/gibbs/logit",seed,".RData",sep = ""))
save(temp_res_2021,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/2021/logit",seed,".RData",sep = ""))
return(seed)
}
fly_clureg=function(seed)
{
library(FdaCluReg)
library(fda)
library(ddalpha)
basis_need=create.bspline.basis(c(seq(0,29,3),30),norder = 4)
temp_res_gibbs=gibbs_clusterwise_regression_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit",
lambda = 1,rounds = 100)
temp_res_2021=clusterwise_reg_2021_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit")
save(temp_res_gibbs,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/gibbs/logit",seed,".RData",sep = ""))
save(temp_res_2021,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/2021/logit",seed,".RData",sep = ""))
return(seed)
}
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("dt_mat","label_mat"))
parLapply(cl,1:20,fly_clureg)
fly_clureg=function(seed)
{
library(FdaCluReg)
library(fda)
library(ddalpha)
basis_need=create.bspline.basis(c(seq(0,29,3),30),norder = 4)
temp_res_gibbs=gibbs_clusterwise_regression_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit",
lambda = 0.5)
temp_res_2021=clusterwise_reg_2021_auto(X_list = list(dt_mat),Y=label_mat,basis = basis_need,sample_t = 1:30,true_label = label_mat,K_max = 4,seed = seed,method = "logit")
save(temp_res_gibbs,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/gibbs/logit",seed,".RData",sep = ""))
save(temp_res_2021,file = paste("C:/users/spenc/desktop/simulation_results/new/real_dt/2021/logit",seed,".RData",sep = ""))
return(seed)
}
num_cores=10
library(parallel)
cl=makeCluster(num_cores)
clusterExport(cl,  envir = environment(),varlist =c("dt_mat","label_mat"))
parLapply(cl,1:10,fly_clureg)
#集成FDA+回归聚类的包
library(devtools)
library(roxygen2)
library(usethis)
##包的名字和路径
setwd("c:/users/spenc/desktop/manual_packages/FdaCluReg")
#create_package("./FdaCluReg")
document()
check()
build()
